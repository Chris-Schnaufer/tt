# Superuser for docker commands and such
sudo: required

# python environment and python version
language: python
python: 
  - "3.6"

# What sources to auto build
branches:
  only:
  - master
  - develop
  # - "/^v\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/"

# We're using docker
services:
  - docker

# Secure stuff: travis encrypt --com '<var>=<value>'
#     DockerHub credentials
env:
  global:
  - secure: "R8Ngn7lFa2itiwZa/Rp4K2sqFsLv2iAyDoOZjmE92fHgqSLYvi4cKXjSOzPIf/CInQhLDkFSKbgTUK72eEfoRhMezIkX/qJG1MUDYT6XhyNlz3XF3mdSmtxEVzgZ1uIsUS1mGqEYvU+sIGxFETO0H/xR6SzAE4EX2B8AE2x4kKa+BnIayT2SaRI36N0TZ2pET4C4Qy4krBvihV2NmixF6rzjwJ6F3jKq50O0S/dhI8+seFInqstJB5FToQkT4/LnNOnqc+pClv0HdL3ZowMOqWiostV0j97Jm71n9zFAJl4GAthE4ZhAGfmohMb3J/g17rtikNFOxAIjTBSWGJg1oSWIg8vD222AVSPjzv9Wa8CX/LauZXRbZ4CshI0Tfz1U14UfUwxGdsiP2zcYMU/hBkcV4coiedtip9UPg9z55dluO9DLolmu2jFoWa9FUhvhbAr4TjveLngaT3SN+N0MzkeHG+ITHM4KyyfFK/jDcsFLTsbeMpZbioh74AhLswsKrAxVAjeAZXynG4+OMTdoFNpIGkMJ7u46lj+xw2TsVRcEX4HBLuExL78xRfL25ZCbNLqZsn2iQ5BbKKsFtMWeDogyq06uGv0GwNjtt303dM18QSIncIsUDrGG4G07S0v0twu+a2tThNtPmFw4GqmmNDOIe68SiuMYYIxWuI+ahGA="
  - secure: "nSSkp37NCAvwlj1WUKIqm8alH+yPsNA6efbGAYO1weclSr+ZK/QWoSp3oMEM0QvWHska5X4Xosdn3G8rRbSzaD/ZkFnkOVpyfWjJlPZbgKRZn07N0koRnq2sNp3HKYlc+2lOd8iIkFq52AcJQOhdVo0DsFlPwrFPj50zUCyML9vObvJa4WSzA7esTD4xArUpbajkYYJvTPViM/JlY8h5I0//lm1oauIj6c+w7vfTTEEpXoohp0QBgs6F54WjyQG/Pn5ARedDv1+F7FXutaFvcaHvMgHB44ft87QP0mGDcdjMYnAgzfgvSVykqzzXgR0a7qyUfHBeVvUbSxT0aRG8pgynvHKrfO12nyv6VyTPUAyv4PYPt0wcsZfyDYQgRvz7fH8+ZDK2XnyTdF32xSTbMmTepAIhrdBbvoecBuogBUOG/yjuUYF1CR7xxWU6q5vYSNh33U1zIM/3skcdeh+tiqbCP6TguBPbPE9jYqI0O9EVl9XE9btuVaN0VS1ELBJW22wW8rDRqQIt+onWwLSf1iS2HyU+Qj3TL3rIz3/i8oxPrLAMwpswGxI4bvXYz27LVfr6DDF8w5s0+tDmC0uzS3L7ZmhlokoVOUWFu5u4ETg69eEA/UXiVppnZArZ9Efg3uiobuFZIbaGXjCNn1EmX5GWu6eddaHgYmiwRXwoyQM="
  - secure: "U4ei9lsunTMs2xmT1bglwm4GBm6w4eVN4QLPpkJd8XJGCfNuA+/CYN08XM+6UH+QzGNilUnYFYuv4LHB7jwJ1LWmKWOLLYdzFKNE6xp56Mu1afWdMXky1XQRhXf2lJuZjtNkB+AAv4o0olqZsschFnxE1FDxb3BuKiRrKJ4GDy3EqzjoppgxN5azkPJOA6dygCasECq1To2De237BnKdTRniJTtfZQLtyOQTGAbGx392N2XYGLrLAoougreeypw0SFCvqweiNgLORWXjA5eIIU8CI7YMSH4OiKaWVNTO7hDjXJrNotqYSA2NzKCczNnegNggAiVD0WMnWcsUhvytvVVJ/zZZoZlMcQoyym4g7AS7qL08mBNutjo3T3O3rPyA03x55gcGBP6WDSOeP6cMD2y9GgZjxLQmnAhyxekBpTWdj653QGHyTlC6EAGLmblUtWafIt/aRI4ebqnj2TDVGuyfLIYO5QRjcjdEwGTLYlO4oZfwapZYwg6pSVMQuagN5EbxLAHoaboEBNWUOQf0W7xksCwPsEDlLiPY1wCID3N/VJJH9xmbZn5erKjQT4rxeBrS+yHPqw/Du0ftNHgSCp6I1GSDkIhhgoOs2pr8lw0gcr9vjT2XLqejsNt47jM0qAXsWnLyicZseSRhlgALUK1G3TnREiCbZIe3fl28RTQ="

# Basic information for build
before_install:
  - docker --version
  - ls -l
  - echo "Attempting to update to docker-compose version:$DOCKER_COMPOSE_VERSION"
  - sudo rm -f /usr/local/bin/docker-compose   # Update docker-compose
  - curl -L https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - ls -l docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose --version
  - pip3 install boxsdk
  - openssl aes-256-cbc -K $encrypted_53c1c3cd3f28_key -iv $encrypted_53c1c3cd3f28_iv -in junk.enc -out ./junk -d
  - cat ./junk

# Start up the test bed containers and copy files from other locations as needed
install:
  - docker-compose -p clowder -f test/docker-compose.yml up -d
  - docker ps -a
  - docker inspect clowder_clowder_1
  - ./test/wait_for_clowder.sh
  # Setup the clowder account
  - echo "Docker URL:$DOCKER_HOST_URI"
  - curl -X POST -H "Content-Type:application/x-www-form-urlencoded" "$DOCKER_HOST_URI/signup?email=test%40example.com"
  - ./test/wait_for_registration.sh
  - URI=`sed -r 's/.*href="(.+)">.*/\1/' reg.txt`
  - echo "URI:$URI"
  - curl -X POST -H "Content-Type:application/x-www-form-urlencoded" "$URI?firstName=test&lastName=test&password.password1=testPassword&password.password2=testPassword&agreementAcknowledged=true"
  - curl -X POST -H "Content-Type:application/x-www-form-urlencoded" "$DOCKER_HOST_URI/authenticate/userpass?username=test%40example.com&password=testPassword" -D headers.txt
  - USER_ID=`grep 'Set-Cookie:\ id' headers.txt | sed -r 's/Set-(.+);.*;.*/\1/'`
  - echo "USER ID:$USER_ID"
  - export API_KEY=`curl -X POST -v -H "Content-Type:application/x-www-form-urlencoded" "$DOCKER_HOST_URI/api/users/keys?name=testingkey" -H "$USER_ID" | sed -r 's/.*"key":"(.+)".*/\1/'`
  - echo "API KEY:$API_KEY"
  # Pull down the testing files
  #- ./test/fetch_box_archives.py "$TEST_COMPARE_ARCHIVE" "$TEST_SOURCE_ARCHIVE"
  - echo "$SFTP_DEST"
  - echo "@get rgbmask_test_data.tar" | sftp -i ./junk -b - "$SFTP_DEST"
  - echo "@get rgbmask_results.tar" | sftp -i ./junk -b - "$SFTP_DEST"

# Setup the clowder environment
before_script:
  - export SPACE_ID=`curl -X POST -v -H "accept:application/json" -H "Content-Type:application/json" -d '{"name":"test_space","description":"Test results"}' "$DOCKER_HOST_URI/api/spaces?key=$API_KEY" | sed -r 's/.*id\"\:\"(.+)\".*/\1/'`
  - echo "SPACE_ID:$SPACE_ID"
  - export DATASET_ID=`curl -X POST -v -H "accept:application/json" -H "Content-Type:application/json" -d '{"name":"$TEST_DATASET_NAME"}' "$DOCKER_HOST_URI/api/datasets/createempty?key=$API_KEY" | sed -r 's/.*id\"\:\"(.+)\".*/\1/'`
  - echo "DATASET ID:$DATASET_ID"
  - docker build -t chrisatua/extractors:test ./
  - docker run --network clowder_clowder -e 'RABBITMQ_URI=amqp://rabbitmq/%2F' -e 'RABBITMQ_EXCHANGE=terra' -d $CONTAINER_NAME
  - export EXTRACTOR_NAME=`cat extractor_info.json | grep '\"name\"' | sed -r 's/\"name\"\:.*\"(.+)\",/\1/'`
  - echo "$EXTRACTOR_NAME"
  - ./test/extract.sh "$TEST_SOURCE_ARCHIVE"  # Uncompress the test files
  - ./test/upload_data.py                     # Put the files into clowder
  - ./test/register_extractor.py ./extractor_info.json

# Start the extraction process and get a result
script:
  - curl -X POST -v -H "accept:application/json" -H "Content-Type:application/json" -d '{"extractor":"$EXTRACTOR_NAME"}' "$DOCKER_HOST_URI/api/datasets/$DATASET_ID/extractions?key=$API_KEY"
  - ./test/wait_for_extractor.py "$EXTRACTOR_NAME"
  - ./test/extract_results.py  "$TEST_DATASET_NAME"      # get the results from where ever they ended up
  - ./test/setup_comparables.sh "$TEST_COMPARE_ARCHIVE"  # setup any comparables
  - ./test/validate_results.py      # verify the results

#after_success:

before_deploy:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker push chrisatua/extractors:test


